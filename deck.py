import random

deckMap = {0:'中速猎',1:'奇数骑',2:'城墙牧',3:'亡语猎',4:'奇控法',5:'展览牧',6:'奇奥法',7:'蓝龙德',8:'偶数术',9:'控制牧',10:'奇迹德',11:'奇任战',12:'控制法',13:'魔块术',14:'蓝龙贼',15:'海盗贼',16:'奇数战',17:'奇数贼',18:'奥秘骑',19:'换家德',20:'动物园',21:'偶数骑',22:'任务贼'}

winrate = [[50,50,57,54,41,63,45,58,59,50,58,48,53,53,73,43,47,47,56,54,54,49,73],
		   [50,50,45,68,46,52,67,33,43,37,44,54,53,46,76,73,47,60,57,34,55,59,64],
		   [43,55,50,57,67,50,49,45,54,55,60,46,49,71,29,41,47,45,55,47,47,47,42],
		   [46,32,43,50,69,44,67,71,58,43,74,75,68,60,62,45,68,39,40,80,40,47,54],
		   [59,54,33,31,50,30,55,44,59,43,30,57,45,43,48,63,39,69,52,45,73,59,57],
		   [37,48,50,56,70,50,27,45,64,53,47,55,53,69,26,26,57,42,38,59,45,36,45],
		   [55,33,51,33,45,73,50,52,51,52,70,43,67,56,89,43,49,45,42,48,50,44,88],
		   [42,67,55,29,56,55,48,50,33,73,43,51,66,45,47,65,54,65,51,41,40,26,50],
		   [41,57,46,42,41,36,49,67,50,44,83,42,57,64,65,43,43,41,41,72,58,59,45],
		   [50,63,45,57,57,47,48,27,56,50,53,26,51,75,44,41,24,49,47,19,52,58,38],
		   [42,56,40,26,70,53,30,57,17,47,50,72,32,52,49,56,74,37,42,55,27,32,45],
		   [52,46,54,25,43,45,57,49,58,74,28,50,56,36,49,73,68,69,55,26,61,34,44],
		   [47,47,51,32,55,47,33,34,43,49,68,44,50,49,47,59,70,47,56,40,59,51,41],
		   [47,54,29,40,57,31,44,55,36,25,48,64,51,50,43,37,51,51,51,72,65,36,59],
		   [27,24,71,38,52,74,11,53,35,56,51,51,53,57,50,8,45,17,13,50,22,19,59],
		   [57,27,59,55,37,74,57,35,57,59,44,28,41,63,92,50,20,51,26,13,60,50,67],
		   [53,53,53,32,61,43,51,46,57,76,26,32,30,49,55,80,50,68,49,5,57,51,23],
		   [53,40,55,61,31,58,55,35,59,51,63,31,53,49,83,49,32,50,57,39,56,69,74],
		   [44,43,45,60,48,63,58,49,59,53,58,45,44,49,87,74,51,43,50,57,50,50,77],
		   [46,66,53,20,55,41,52,59,28,81,45,74,60,28,50,87,95,61,43,50,45,45,34],
		   [46,45,53,60,27,55,50,60,42,48,73,39,41,35,78,40,43,44,50,55,50,37,81],
		   [51,41,53,53,41,64,56,74,41,42,68,66,49,64,81,50,49,31,55,55,63,50,58],
		   [27,36,58,46,43,55,12,50,55,62,55,56,59,41,41,33,77,26,23,66,19,42,50]]

#hotrate = [26,8.7,7.5,7.3,5.4,5.4,4.6,3.6,3.2,2.8,2.6,2.5,2.3,1.9,1.8,1.7,1.7,1.7,1.4,1.3,1.2,1.2]
hotrate = [37,8,2,6,3,6,10,3,10,15,1,0,2,1,0,15,9,14,2,0,12,15,5]
#hotrate = [9,2,2,5,3,2,0,7,2,0,1,4,0,1,2,0,2,0,2,1,5,1,1,2]


sameClass = [[0,3],[1,18,21],[2,5,9],[4,6,12],[7,10,19],[8,13,20],[11,16],[14,15,17]]

lineup = []

for i in range(len(winrate)):
	for j in range(len(winrate[i])):
		winrate[i][j] /= 100

for a_class in sameClass:
	for i in a_class:
		for other_class in sameClass:
			if a_class == other_class:
				pass
			else:
				for j in other_class:
					lineup.append([i,j])

maxpoint = 0
bestdeck = []

result = []

for my_deck in lineup:
	point = 0
	for op_deck in lineup:

		win = winrate[my_deck[0]][op_deck[0]] * (winrate[my_deck[1]][op_deck[0]]+winrate[my_deck[1]][op_deck[1]]-winrate[my_deck[1]][op_deck[0]]*winrate[my_deck[1]][op_deck[1]]) + (1 - winrate[my_deck[0]][op_deck[0]]) * (winrate[my_deck[1]][op_deck[1]]*winrate[my_deck[0]][op_deck[1]])

		win *= hotrate[op_deck[0]]*hotrate[op_deck[1]]/10000
		point += win
	result.append((point,my_deck))

best_deck = sorted(result,key=lambda deck: deck[0],reverse = True)

for i in range(10):
	print(deckMap[best_deck[i][1][0]] + ', ' + deckMap[best_deck[i][1][1]])
